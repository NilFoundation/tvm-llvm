//===-- TVMISelDAGToDAG.cpp - A dag to dag inst selector for TVM ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the TVM target.
//
//===----------------------------------------------------------------------===//

#include "TVM.h"
#include "TVMTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/Config/llvm-config.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "tvm-isel"

/// TVMDAGToDAGISel - TVM specific code to select TVM machine
/// instructions for SelectionDAG operations.
///
namespace {
class TVMDAGToDAGISel : public SelectionDAGISel {
public:
  TVMDAGToDAGISel(TVMTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

private:
  StringRef getPassName() const override {
    return "TVM DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "TVMGenDAGISel.inc"

  // Main method to transform nodes into machine nodes.
  void Select(SDNode *N) override;

  bool tryIndexedLoad(SDNode *Op);
  bool tryIndexedBinOp(SDNode *Op, SDValue N1, SDValue N2, unsigned Opc8,
                       unsigned Opc16);

  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Disp);
};
} // end anonymous namespace

/// createTVMISelDag - This pass converts a legalized DAG into a
/// TVM-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createTVMISelDag(TVMTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new TVMDAGToDAGISel(TM, OptLevel);
}

bool TVMDAGToDAGISel::SelectAddr(SDValue N, SDValue &Base, SDValue &Disp) {
  // TODO: Implement
  return false;
}

bool TVMDAGToDAGISel::tryIndexedLoad(SDNode *N) {
  // TODO: Implement
  return false;
}

bool TVMDAGToDAGISel::tryIndexedBinOp(SDNode *Op, SDValue N1, SDValue N2,
                                      unsigned Opc8, unsigned Opc16) {
  // TODO: Implement
  return false;
}

void TVMDAGToDAGISel::Select(SDNode *Node) {
  SDLoc dl(Node);

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Select the default instruction
  SelectCode(Node);
}
